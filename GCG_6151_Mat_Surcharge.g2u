Program.Sub.Preflight.Start
V.Global.bError.Declare(Boolean)
V.Global.bUnattended.Declare(Boolean)
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.Try
Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout
'Written for Alco Manufacturing
'Custom Material Surcharge Script - Customer needs for material surcharges to be split out onto a separate invoice for certain parts
'Written by Ashley Collins
'11/2/2020

'open the connection to the db
F.ODBC.Connection!con.OpenConnection(V.Ambient.PDSN, V.Ambient.PUser, V.Ambient.PPass)

F.Intrinsic.Control.If(V.Caller.Hook,=,13280)
'Inventory Master Populate Hook 
	F.Intrinsic.Control.CallSub(ScreenPopulate)
'F.Intrinsic.Control.ElseIf(V.Caller.Hook,=,49389)
'GAB Button 1
F.Intrinsic.Control.ElseIf(V.Caller.Hook,=,49390)
'GAB button 2
	F.Intrinsic.Control.CallSub(SurchargeInfo)
F.Intrinsic.Control.ElseIf(V.Caller.Hook,=,13290)
'OK Button on Inventory Options screen
	F.Intrinsic.Control.CallSub(SurchargeUpdate)
F.Intrinsic.Control.Else
	'menu item to run sql update statement to set User49 to value in Material Surcharge Type field and clear material surcharge type field
	F.Intrinsic.Control.CallSub(MassUpdate)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(f_Main_Unload)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6151", "ProjectTitle", "Material Surcharge", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.ScreenPopulate.Start
F.Intrinsic.Control.Try
V.Local.sLoc.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sRev.Declare(String)
V.Local.sSQL.Declare(String)

V.Local.sPart.Set(V.Passed.PART)
V.Local.sRev.Set(V.Passed.REV)
V.Local.sLoc.Set(V.Passed.LOC)

'set horizontal position
'F.Intrinsic.Variable.SetProperty("GAB-BTN-1", "PL",650)
F.Intrinsic.Variable.SetProperty("GAB-BTN-2", "PL",650)
'set vertical position
'F.Intrinsic.Variable.SetProperty("GAB-BTN-1", "PT",650)
F.Intrinsic.Variable.SetProperty("GAB-BTN-2", "PT",355)
'make the button visible
'F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-BTN-1, "HIDE", 0)
'F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-BTN-1, "LOCK", 0)

F.Intrinsic.Variable.SetProperty("GAB-BTN-2", "PW", 150)

F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-BTN-2, "HIDE", 0)
F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-BTN-2, "LOCK", 0)

'check to see if there is a value in Inv Extra User Field 49. If there is, set the button to be that value. Otherwise, set the value to 'Matl Surcharge'
F.Intrinsic.String.Build("SELECT USER49 FROM INV_EXTRA WHERE PART = '{0}' AND REV = '{1}' AND LOCATION = '{2}'", V.Local.sPart, V.Local.sRev, V.Local.sLoc, V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"")
	'V.Passed.GAB-BTN-1.Set(V.Local.sRet.Trim)
	V.Passed.GAB-BTN-2.Set(V.Local.sRet.Trim)
F.Intrinsic.Control.Else
	'V.Passed.GAB-BTN-1.Set("Matl Surcharge")
	V.Passed.GAB-BTN-2.Set("Matl Surcharge")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6151", "ProjectTitle", "Material Surcharge", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.ScreenPopulate.End

Program.Sub.SurchargeInfo.Start
F.Intrinsic.Control.Try
V.Local.sRet.Declare(String)
V.Local.sSQL.Declare(String)

'create query for a material surcharge browser
V.Local.sSQL.Set("SELECT DISTINCT MATL_TYPE, MATL_DESC FROM MATL_SRCHG ORDER BY MATL_TYPE")
F.Intrinsic.UI.Browser("Material Surcharge Codes", "con", V.Local.sSQL, "MATERIAL*!*DESCRIPTION", "800*!*2000", V.Local.sRet)

F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*", V.Local.sRet)
'	V.Passed.GAB-BTN-1.Set(V.Local.sRet(0).Trim)
	V.Passed.GAB-BTN-2.Set(V.Local.sRet(0).Trim)
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("No Material Surchage Code Selected!")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6151", "ProjectTitle", "Material Surcharge", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.SurchargeInfo.End

Program.Sub.SurchargeUpdate.Start
F.Intrinsic.Control.Try
V.Local.sInvField.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sRev.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sUser49.Declare(String)

V.Local.sPart.Set(V.Passed.PART)
V.Local.sRev.Set(V.Passed.REV)
V.Local.sLoc.Set(V.Passed.LOC)

'V.Local.sUser49.Set(V.Passed.GAB-BTN-1)

V.Local.sUser49.Set(V.Passed.GAB-BTN-2)

F.Intrinsic.String.Build("SELECT USER49 FROM INV_EXTRA WHERE PART = '{0}' AND REV = '{1}' AND LOCATION = '{2}'", V.Local.sPart, V.Local.sRev, V.Local.sLoc, v.Local.sSQL)
F.ODBC.Connection!con.OpenLocalRecordsetRW("rstInvExtra", V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.con!rstInvExtra.EOF,=,True)
	'if no record is found, insert a record
	F.Intrinsic.String.Build("INSERT INTO INV_EXTRA  (PART, REV,LOCATION,USER1,USER2,USER3,USER4,USER5,USER6, USER7,USER8,USER9,USER10,USER11,USER12,USER13,USER14,USER15,USER16,USER17,USER18,USER19,USER20,USER21,USER22,USER23,USER24,USER25,USER26,USER27,USER28,USER29,USER30,USER31,USER32,USER33,USER34,USER35,USER36,USER37,USER38,USER39,USER40,USER41,USER42,USER43,USER44,USER45,USER46,USER47,USER48,USER49,USER50,USER51,USER52,USER53,USER54,USER55,USER56,USER57,USER58) VALUES ('{0}','{1}', '{2}', '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','{3}','','','','','','','','','')", V.Local.sPart, V.Local.sRev, v.Local.sLoc, V.Local.sUser49, V.Local.sSQL)
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
F.Intrinsic.Control.Else
	'if record found, update the user49 field
	F.ODBC.con!rstInvExtra.Set!USER49(V.Local.sUser49)
	F.ODBC.con!rstInvExtra.Update
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6151", "ProjectTitle", "Material Surcharge", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.SurchargeUpdate.End

Program.Sub.MassUpdate.Start
F.Intrinsic.Control.Try
V.Local.iCnt.Declare(Long)
V.Local.iLen.Declare(Long)
V.Local.sLoc.Declare(String)
v.Local.sFullPart.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sRev.Declare(String)
V.Local.sSQL.Declare(String)

V.Local.sSQL.Set("SELECT T1.PART, T1.LOCATION, T2.MATL_SCHRG_TYPE FROM V_INVENTORY_MST2 T1 INNER JOIN V_INVENTORY_MST3 T2 ON T1.PART = T2. PART AND T1.LOCATION = T2.LOCATION WHERE (T1.TEXT_INFO2 = 'GATES' OR T1. TEXT_INFO2 = 'EATON') AND T2.MATL_SCHRG_TYPE > '' ")

F.Intrinsic.Control.If(V.DataTable.dtPartList.Exists)
	F.Data.DataTable.Close("dtPartList")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("dtPartList", "con", v.Local.sSQL, True)

F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtPartList.RowCount--,1)
	V.Local.sFullPart.Set(V.DataTable.dtPartList(v.Local.iCnt).PART!FieldVal)
	V.Local.sLoc.Set(V.DataTable.dtPartList(v.Local.iCnt).LOCATION!FieldValTrim)
	
	F.Intrinsic.String.Len(V.Local.sFullPart,V.Local.iLen)
	F.Intrinsic.Control.If(v.Local.iLen,=,20)
		F.Intrinsic.String.Right(V.Local.sFullPart,3,v.Local.sRev)
		F.Intrinsic.String.Left(V.Local.sFullPart,17,V.Local.sPart)
	F.Intrinsic.Control.ElseIf(v.Local.iLen,<,20)
		F.Intrinsic.String.RPad(V.Local.sFullPart, " ", 20, V.Local.sPart)
		F.Intrinsic.String.Right(V.Local.sPart,3,V.Local.sRev)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("SELECT USER49 FROM INV_EXTRA WHERE PART = '{0}' AND REV = '{1}' AND LOCATION = '{2}' ", v.Local.sPart, v.Local.sRev, V.Local.sLoc, V.Local.sSQL)
	F.ODBC.Connection!con.OpenRecordsetRO("rstUser49", v.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstUser49.EOF,=,True)
		F.Intrinsic.String.Build("INSERT INTO INV_EXTRA  (PART, REV,LOCATION,USER1,USER2,USER3,USER4,USER5,USER6, USER7,USER8,USER9,USER10,USER11,USER12,USER13,USER14,USER15,USER16,USER17,USER18,USER19,USER20,USER21,USER22,USER23,USER24,USER25,USER26,USER27,USER28,USER29,USER30,USER31,USER32,USER33,USER34,USER35,USER36,USER37,USER38,USER39,USER40,USER41,USER42,USER43,USER44,USER45,USER46,USER47,USER48,USER49,USER50,USER51,USER52,USER53,USER54,USER55,USER56,USER57,USER58) VALUES ('{0}','{1}', '{2}', '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','{3}','','','','','','','','','')", V.Local.sPart, V.Local.sRev, v.Local.sLoc, V.DataTable.dtPartList(V.Local.iCnt).MATL_SCHRG_TYPE!FieldValTrim, v.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("UPDATE INV_EXTRA SET USER49 = '{0}' WHERE PART = '{1}' AND REV = '{2}' AND LOCATION = '{3}' ", V.DataTable.dtPartList(V.Local.iCnt).MATL_SCHRG_TYPE!FieldValTrim, V.Local.sPart, V.Local.sRev, V.Local.sLoc, V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
	F.Intrinsic.Control.EndIf
	f.ODBC.con!rstUser49.Close
	
	F.Intrinsic.String.Build("UPDATE INVENTORY_MST3 SET MATL_SCHRG_TYPE = ' ' WHERE PART = '{0}' AND LOCATION = '{1}' ", V.Local.sFullPart, V.Local.sLoc, v.Local.sSQL)
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
F.Intrinsic.Control.Next(V.Local.iCnt)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6151", "ProjectTitle", "Material Surcharge", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.MassUpdate.End

Program.Sub.f_Main_Unload.Start
F.Intrinsic.Control.Try
'close the connection
F.ODBC.Connection!con.Close
'end the program
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6151", "ProjectTitle", "Material Surcharge", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.f_Main_Unload.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called
F.Intrinsic.Control.Try

V.Local.iError.Declare(Long)
V.Local.sErrorDescription.Declare(String)
V.Local.sSubroutine.Declare(String)
V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)

V.Local.iError.Set(V.Args.ErrorNumber)
V.Local.sErrorDescription.Set(V.Args.ErrorDescription)
V.Local.sSubroutine.Set(V.Args.Subroutine)

'make sure we aren't in an error loop
F.Intrinsic.Control.If(V.Global.bError)
	F.Intrinsic.Control.End

F.Intrinsic.Control.EndIf
V.Global.bError.Set(True)

F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Local.sSubroutine, V.Local.iError, V.Local.sErrorDescription, V.Ambient.GABVersion, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End

Program.Sub.Comments.Start
${$5$}$3.0.0.0$}$1
${$6$}$acollins$}$20201203140449738$}$h98hERc2yV72q0GaUGlwSaoK/aefTdVkg+e2yth67TaAoNTix2nCYatZBLfbt4BPVJV7qcJNRgzLtBP67TfXBg==
Program.Sub.Comments.End